using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace AP8PO.UserControls
{
    public class CommitsViewModel : Model
    {
        public CommitsViewModel()
        {
            DataConnection.DbContext.Groups.Load();
            DataConnection.DbContext.Courses.Load();
            DataConnection.DbContext.CourseCommits.Load();
        }

        public void AddCommit(CourseCommit commit)
        {
            DataConnection.DbContext.Insert(commit);
        }

        public void ClearCommits()
        {
            DataConnection.DbContext.CourseCommits.Local.Clear();
            //ConfirmChanges();
        }

        public void ConfirmChanges()
        {
            DataConnection.DbContext.SaveChanges();
        }
    }

    /// <summary>
    /// Interaction logic for ManageCommitsControl.xaml
    /// </summary>
    public partial class ManageCommitsControl : UserControl
    {
        public CommitsViewModel ViewModel { get; set; } = new CommitsViewModel();

        public ObservableCollection<Group> Groups { get; set; } = new ObservableCollection<Group>();

        public ManageCommitsControl()
        {
            InitializeComponent();
            DataConnection.DbContext.Groups.Load();
            Groups = DataConnection.DbContext.Groups.Local;
            list.ItemsSource = DataConnection.DbContext.CourseCommits.Local;
            list.AutoGeneratedColumns += List_AutoGeneratedColumns;
            DataContext = this;
        }

        private void List_AutoGeneratedColumns(object sender, EventArgs e)
        {
            list.Columns[0].Visibility = Visibility.Hidden;
        }

        public void GenerateCommits()
        {
            ViewModel.ClearCommits();

            foreach (var group in Groups)
            {
                if (group.Courses != null)
                {
                    foreach (var course in group.Courses)
                    {
                        var practices = generateClasses(course, CourseType.Practice);
                        var seminars = generateClasses(course, CourseType.Seminar);
                        var lecture = generateLecture(course);

                        if (lecture != null)
                            ViewModel.AddCommit(lecture);

                        foreach (var practice in practices)
                            ViewModel.AddCommit(practice);

                        foreach (var seminar in seminars)
                            ViewModel.AddCommit(seminar);
                    }
                }
            }
            DataConnection.DbContext.SaveChangesAsync();
        }


        private void GenerateCommits_ButtonClick(object sender, RoutedEventArgs e)
        {
            GenerateCommits();
        }

        private IList<CourseCommit> generateClasses(Course course, CourseType courseType)
        {
            var commits = new List<CourseCommit>();
            var hoursOfCommit = course.HoursOfPractises;
            char abChar = 'P';

            if (courseType == CourseType.Seminar)
            {
                hoursOfCommit = course.HoursOfSeminars;
                abChar = 'S';
            }

            if (hoursOfCommit > 0)
            {
                var totalPractices = Math.Ceiling(course.Group.StudentsCount / (double)course.MaxStudentsPerClass);
                var avgStudentsCount = (int)Math.Ceiling(course.Group.StudentsCount / (double)totalPractices);
                var studentsAssigned = 0;
                for (int i = 0; i < totalPractices - 1; i++)
                {
                    commits.Add(new CourseCommit()
                    {
                        Abbrevation = $"{course.Abbrevation}{abChar}{i+1}",
                        Name = $"{course.Name}-{abChar}{i+1}",
                        Course = course,
                        CourseType = courseType,
                        Hours = hoursOfCommit,
                        Language = course.Language,
                        NumberOfStudents = avgStudentsCount
                    }) ;
                    studentsAssigned += avgStudentsCount;
                }
                commits.Add(new CourseCommit()
                {
                    Abbrevation = $"{course.Abbrevation}{abChar}{totalPractices}",
                    Name = $"{course.Name}-{abChar}{totalPractices}",
                    Course = course,
                    CourseType = courseType,
                    Hours = hoursOfCommit,
                    Language = course.Language,
                    NumberOfStudents = course.Group.StudentsCount - studentsAssigned
                });
            }
            return commits;
        }

        private CourseCommit generateLecture(Course course)
        {
            CourseCommit lecture = null;
            if (course.HoursOfLectures > 0)
            {
                lecture = new CourseCommit()
                {
                    Abbrevation = course.Abbrevation+"L",
                    Name = $"{course.Name}-L",
                    Course = course,
                    CourseType = CourseType.Lecture,
                    Hours = course.HoursOfLectures,
                    Language = course.Language,
                    NumberOfStudents = course.Group.StudentsCount
                };
            }
            return lecture;
        }
    }
}
