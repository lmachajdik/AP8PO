using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Data.Entity;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;

namespace AP8PO.UserControls
{
    public class CommitsViewModel : Model
    {
        public CommitsViewModel()
        {
            DataConnection.DbContext.Groups.Load();
            DataConnection.DbContext.Courses.Load();
            DataConnection.DbContext.CourseCommits.Load();
        }

        public void AddCommit(CourseCommit commit)
        {
            DataConnection.DbContext.Insert(commit);
        }

        public void ClearCommits()
        {
            DataConnection.DbContext.CourseCommits.Local.Clear();
            //ConfirmChanges();
        }

        public void ConfirmChanges()
        {
            DataConnection.DbContext.SaveChanges();
        }
    }

    /// <summary>
    /// Interaction logic for ManageCommitsControl.xaml
    /// </summary>
    public partial class ManageCommitsControl : UserControl
    {
        public CommitsViewModel ViewModel { get; set; } = new CommitsViewModel();

        public ObservableCollection<Group> Groups { get; set; } = new ObservableCollection<Group>();
        public ObservableCollection<Employee> Employees { get; set; } = new ObservableCollection<Employee>();
        public ManageCommitsControl()
        {
            InitializeComponent();
            DataConnection.DbContext.Groups.Load();
            Groups = DataConnection.DbContext.Groups.Local;
            Employees = DataConnection.DbContext.Employees.Local;
            list.ItemsSource = DataConnection.DbContext.CourseCommits.Local;
            list.AutoGeneratedColumns += List_AutoGeneratedColumns;
            list.SelectionChanged += List_SelectionChanged;
            list.Sorting += List_Sorting;
            DataContext = this;
        }

        private ListSortDirection lastDir = ListSortDirection.Ascending;
        private void List_Sorting(object sender, DataGridSortingEventArgs e)
        {
            if (e.Column.Header.ToString() == "Employee")
            {
                Func<CourseCommit, string> sortEmployeeFunc = (CourseCommit c) =>
                {
                    if (c.Employee == null)
                        return string.Empty;

                    return c.Employee.ToString();
                };
                if (lastDir == ListSortDirection.Ascending)
                {
                    list.ItemsSource = DataConnection.DbContext.CourseCommits.Local.OrderBy(sortEmployeeFunc);
                    lastDir = ListSortDirection.Descending;
                }
                else
                {
                    list.ItemsSource = DataConnection.DbContext.CourseCommits.Local.OrderByDescending(sortEmployeeFunc);
                    lastDir = ListSortDirection.Ascending;
                }
                e.Handled = true;
            }
            else if (e.Column.Header.ToString() == "Course")
            {
                if (lastDir == ListSortDirection.Ascending)
                {
                    list.ItemsSource = DataConnection.DbContext.CourseCommits.Local.OrderBy((CourseCommit c) => c.Course.ToString());
                    lastDir = ListSortDirection.Descending;
                }
                else
                {
                    list.ItemsSource = DataConnection.DbContext.CourseCommits.Local.OrderByDescending((CourseCommit c) => c.Course.ToString());
                    lastDir = ListSortDirection.Ascending;
                }
                e.Handled = true;
            }
        }

        private void List_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (e.AddedItems.Count > 0 && e.AddedItems[0] is CourseCommit)
            {
                var em = (e.AddedItems[0] as CourseCommit).Employee;

                if (em == null)
                    em = new Employee();

                AssignedEmployee[0] = em;
            }
            /// AssignedEmployee = 
        }

        private void List_AutoGeneratedColumns(object sender, EventArgs e)
        {
            list.Columns[0].Visibility = Visibility.Hidden;
        }

        public void GenerateCommits()
        {
            ViewModel.ClearCommits();
            Employees.ToList().ForEach(e => e.CurrentLoad = 0);
            foreach (var group in Groups)
            {
                if (group.Courses != null)
                {
                    foreach (var course in group.Courses)
                    {
                        var practices = generateClasses(course, CourseType.Practice);
                        var seminars = generateClasses(course, CourseType.Seminar);
                        var lecture = generateLecture(course);

                        if (lecture != null)
                            ViewModel.AddCommit(lecture);

                        foreach (var practice in practices)
                            ViewModel.AddCommit(practice);

                        foreach (var seminar in seminars)
                            ViewModel.AddCommit(seminar);
                    }
                }
            }
            DataConnection.DbContext.SaveChangesAsync();
        }


        private void GenerateCommits_ButtonClick(object sender, RoutedEventArgs e)
        {
            if(MessageBox.Show("Are you sure you want to generate new commits?", "",MessageBoxButton.YesNo) == MessageBoxResult.Yes)
                GenerateCommits();
             
        }

        private IList<CourseCommit> generateClasses(Course course, CourseType courseType)
        {
            var commits = new List<CourseCommit>();
            var hoursOfCommit = course.HoursOfPractises;
            char abChar = 'P';

            if (courseType == CourseType.Seminar)
            {
                hoursOfCommit = course.HoursOfSeminars;
                abChar = 'S';
            }

            if (hoursOfCommit > 0)
            {
                var totalPractices = Math.Ceiling(course.Group.StudentsCount / (double)course.MaxStudentsPerClass);
                var avgStudentsCount = (int)Math.Ceiling(course.Group.StudentsCount / (double)totalPractices);
                var studentsAssigned = 0;
                for (int i = 0; i < totalPractices - 1; i++)
                {
                    commits.Add(new CourseCommit()
                    {
                        Abbrevation = $"{course.Abbrevation}{abChar}{i + 1}",
                        Name = $"{course.Name}-{abChar}{i + 1}",
                        Course = course,
                        CourseType = courseType,
                        Hours = hoursOfCommit,
                        Language = course.Language,
                        NumberOfStudents = avgStudentsCount
                    });
                    studentsAssigned += avgStudentsCount;
                }
                commits.Add(new CourseCommit()
                {
                    Abbrevation = $"{course.Abbrevation}{abChar}{totalPractices}",
                    Name = $"{course.Name}-{abChar}{totalPractices}",
                    Course = course,
                    CourseType = courseType,
                    Hours = hoursOfCommit,
                    Language = course.Language,
                    NumberOfStudents = course.Group.StudentsCount - studentsAssigned
                });
            }
            return commits;
        }

        private CourseCommit generateLecture(Course course)
        {
            CourseCommit lecture = null;
            if (course.HoursOfLectures > 0)
            {
                lecture = new CourseCommit()
                {
                    Abbrevation = course.Abbrevation + "L",
                    Name = $"{course.Name}-L",
                    Course = course,
                    CourseType = CourseType.Lecture,
                    Hours = course.HoursOfLectures,
                    Language = course.Language,
                    NumberOfStudents = course.Group.StudentsCount
                };
            }
            return lecture;
        }

        public ObservableCollection<Employee> AssignedEmployee { get; set; } = new ObservableCollection<Employee>() { new Employee() };

        private void Unassign_Click(object sender, RoutedEventArgs e)
        {
            Button btn = sender as Button;
            var employee = btn.DataContext as Employee;
            if (employee.FirstName == null && employee.Surname == null)
                return;

            var commit = list.SelectedItem as CourseCommit;
            commit.Employee = employee;
            employee.Commits.Remove(commit);
            employee.CurrentLoad -= commit.Hours;
            AssignedEmployee[0] = new Employee();
            ViewModel.ConfirmChanges();
        }

        private void Assign_Click(object sender, RoutedEventArgs e)
        {
            Button btn = sender as Button;
            var commit = list.SelectedItem as CourseCommit;
            var employee = btn.DataContext as Employee;

            if (employee.CurrentLoad + commit.Hours > employee.MaxLoad)
            {
                MessageBox.Show($"Emploee {employee} has reached max load! ({employee.MaxLoad}. Unassign some commits first.");
                return;
            }

            if (commit.Employee != null)
            {
                if (commit.Employee == employee)
                    return;

                if(MessageBox.Show($"Do you want to assign {employee} instead of {commit.Employee}?","",MessageBoxButton.YesNo) == MessageBoxResult.No)
                    return;

                commit.Employee.CurrentLoad -= commit.Hours;
            }

            commit.Employee = employee;
            employee.Commits.Add(commit);
            employee.CurrentLoad += commit.Hours;
            AssignedEmployee[0] = employee;
            ViewModel.ConfirmChanges();
        }

        private void CheckBox_Click(object sender, RoutedEventArgs e)
        {
            var cb = sender as CheckBox;
            if ((bool)cb.IsChecked == true)
            {
                list.ItemsSource = new ObservableCollection<CourseCommit>(
                    from item in DataConnection.DbContext.CourseCommits.Local
                    where item.Employee == null
                    select item);
            }
            else
            {
                list.ItemsSource = DataConnection.DbContext.CourseCommits.Local;
            }
        }
    }
}
