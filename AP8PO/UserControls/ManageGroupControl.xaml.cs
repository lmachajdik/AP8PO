using System;
using System.Collections.ObjectModel;
using System.Data.Entity;
using System.Windows;
using System.Windows.Controls;

namespace AP8PO
{
    public class GroupViewModel : Model
    {
        public ObservableCollection<Course> Courses;

        public GroupViewModel()
        {
            DataConnection.DbContext.Groups.Load();
            DataConnection.DbContext.Courses.Load();
            Courses = DataConnection.DbContext.Courses.Local;
        }

        public Group CreateNew()
        {
            var group = new Group();
            DataConnection.DbContext.Insert(group);
            return group;
        }

        public void Remove(Group group)
        {
            DataConnection.DbContext.Delete(group);
        }

        public void ConfirmChanges()
        {
            DataConnection.DbContext.SaveChanges();
        }
    }

    /// <summary>
    /// Interaction logic for ManageGroupControl.xaml
    /// </summary>
    public partial class ManageGroupControl : UserControl
    {
        public GroupViewModel ViewModel = new GroupViewModel();

        public ObservableCollection<Course> AllCourses;
        public ObservableCollection<Group> AllGroups;
        //internal ObservableCollection<Group> Groups { get; set; }

        public ManageGroupControl()
        {        
            InitializeComponent();
            this.DataContext = this;
            DataConnection.DbContext.Courses.Load();
            DataConnection.DbContext.Groups.Load();
            AllCourses = DataConnection.DbContext.Courses.Local;
            AllGroups = DataConnection.DbContext.Groups.Local;
            
            list.ItemsSource = DataConnection.DbContext.Groups.Local;
            list.AutoGeneratedColumns += List_AutoGeneratedColumns;
        }

        private void List_AutoGeneratedColumns(object sender, EventArgs e)
        {
            list.Columns[0].Visibility = Visibility.Hidden;
            list.Columns[list.Columns.Count-1].Visibility = Visibility.Hidden;
        }

        private void AddGroupButton_Click(object sender, RoutedEventArgs e)
        {
            ViewModel.CreateNew();
        }

        private void ConfirmButton_Click(object sender, RoutedEventArgs e)
        {
            ViewModel.ConfirmChanges();
        }

        private void DeleteGroupButton_Click(object sender, RoutedEventArgs e)
        {
            if (list.SelectedItem is Group)
            {
                Group group = (Group)list.SelectedItem;
                ViewModel.Remove(group);
            }
        }

        private void AssignButtonClick(object sender, RoutedEventArgs e)
        {
            var course = (sender as Button).DataContext as Course;
            var g = (list.SelectedItem as Group);
            if (course.GroupID == g.ID)
                MessageBox.Show($"Course {course.Name} ({course.Abbrevation}) is already assigned to group {g.Name} ({g.Abbrevation})");
            else
            {
                if (course.Group != null)
                {
                    var msgBoxResult = MessageBox.Show($"This course is assigned to group {course.Group} ({course.Group.Abbrevation}). Are you sure you want to change it?","",
                                    MessageBoxButton.YesNo,
                                    MessageBoxImage.Question
                                    );
                    if (msgBoxResult == MessageBoxResult.No)
                        return;
                }

                course.GroupID = g.ID;
                course.Group = g;
                course.Group.ID = g.ID;
                ViewModel.ConfirmChanges();
            }
        }

        private void UnassignButtonClick(object sender, RoutedEventArgs e)
        {
            var course = (sender as Button).DataContext as Course;
            course.GroupID = null;
            course.Group = null;
            ViewModel.ConfirmChanges();
            
        }
    }
}
